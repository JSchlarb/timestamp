configurations.configureEach {
    exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
    }
}

dependencies {
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.springframework:spring-context-indexer'

    compileOnly 'org.springframework:spring-context-indexer'

    // spring boot
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation 'org.springframework.boot:spring-boot-starter-jetty'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // kotlin
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib'

    // kafka
    implementation 'org.springframework.kafka:spring-kafka'

    // others
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
    implementation 'org.apache.commons:commons-compress:1.26.0'

    // testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

sweeney {
    enforce "jdk:[" + sourceCompatibility + ",)"
}


String[] defaultJvmArgs = [
        "-Duser.timezone=${defaultTimezone}",
        "-Duser.language=${defaultLanguage}",
        "-Dfile.encoding=UTF-8",
        "-Dfile.encoding=UTF-8"
]

java {
    sourceCompatibility = "${sourceCompatibility}"
    targetCompatibility = "${targetCompatibility}"
    withSourcesJar()
    withJavadocJar()
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

springBoot {
    buildInfo()

    // build time optimization, no need to search whole class tree with large proto schema
    mainClass = "eu.eliagroup.mccs.eas.web.EasWebApplicationKt"
}

compileKotlin.dependsOn bootBuildInfo

bootJar {
    layered {
        enabled = true
    }
}

bootRun {
    jvmArgs(defaultJvmArgs)
}

bootBuildImage {
    imageName = "${project.name}:${project.version}"

    environment["BP_JVM_VERSION"] = "${targetCompatibility}"
    environment["BPL_JVM_HEAD_ROOM"] = "10" // reserve 10% of container memory for container os

    // TODO https://github.com/spring-projects/spring-boot/issues/38923
    // buildpacks = ['gcr.io/paketo-buildpacks/graalvm', 'gcr.io/paketo-buildpacks/java-native-image']
    // environment["BP_NATIVE_IMAGE"] = 'true'
}

tasks.withType(Test).configureEach {
    finalizedBy jacocoTestReport
}

