configurations.configureEach {
    exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
    }
}

dependencies {
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.springframework:spring-context-indexer'

    compileOnly 'org.springframework:spring-context-indexer'

    // spring boot
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude module: "spring-boot-starter-tomcat"
    }

    implementation 'org.springframework.boot:spring-boot-starter-jetty'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.security:spring-security-messaging'
    implementation 'org.springframework.boot:spring-boot-starter-json'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    // kotlin
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib'

    // kafka
    implementation 'org.springframework.kafka:spring-kafka'

    // others
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
    implementation 'org.apache.commons:commons-compress:1.27.1'

    // testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}


sweeney {
    enforce "jdk:[" + sourceCompatibility + ",)"
}

spotless {
    kotlin {
        lineEndings = 'UNIX'

        trimTrailingWhitespace()
        ktlint()
    }
}


java {
    sourceCompatibility = "${sourceCompatibility}"
    targetCompatibility = "${targetCompatibility}"
    withSourcesJar()
    withJavadocJar()
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

tasks.withType(Test).configureEach {
    finalizedBy jacocoTestReport
}

