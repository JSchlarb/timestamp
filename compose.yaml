version: '3'

networks:
  mccs-eas:

volumes:
  mccs-eas-db:

services:
  flyway:
    image: flyway/flyway:latest
    depends_on:
      timescaledb:
        condition: service_healthy
    networks:
      - mccs-eas
    command: -url=jdbc:postgresql://timescaledb:5432/eas -user=eas -password=eas -locations=filesystem:/flyway/sql migrate
    volumes:
      - ./charts/mccs-eas-web/migrations:/flyway/sql

  timescaledb:
    image: timescale/timescaledb:latest-pg14
    restart: unless-stopped
    networks:
      - mccs-eas
    environment:
      POSTGRES_DB: eas
      POSTGRES_USER: eas
      POSTGRES_PASSWORD: eas
    ports:
      - '5555:5432'
    volumes:
      - mccs-eas-db:/var/lib/postgresql/data

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U eas -d eas" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: docker.io/bitnami/kafka:3.7
    restart: unless-stopped
    networks:
      - mccs-eas
    environment:
      # KRaft settings
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9055
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9055
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER='yes'
    ports:
      - '9055:9055'
    healthcheck:
      test: [ "CMD-SHELL", "echo 'test-message' | kafka-console-producer.sh --broker-list localhost:9092 --topic health-check-topic && kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic health-check-topic --from-beginning --max-messages 1 | grep 'test-message'" ]
      interval: 15s
      timeout: 10s
      retries: 3

  schema-registry:
    image: docker.io/bitnami/schema-registry:7.6
    restart: unless-stopped
    ports:
      - '8081:8081'
    depends_on:
      - kafka
    networks:
      - mccs-eas
    environment:
      - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081
      - SCHEMA_REGISTRY_KAFKA_BROKERS=PLAINTEXT://kafka:9092
    healthcheck:
      test: curl --fail http://localhost:8081/v1/metadata/id || exit 1
      interval: 10s
      retries: 5
      timeout: 10s

  keycloak:
    image: quay.io/keycloak/keycloak:23.0.4
    command: [ "start-dev", "--import-realm", "--proxy=edge", "--hostname-strict-https=true", "--health-enabled=true"]
    restart: unless-stopped
    networks:
      - mccs-eas
    environment:
      - KC_REALM_NAME=sandbox
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    ports:
      - 8089:8080
    volumes:
      - ./src/test/resources/keycloak/realm-sandbox.json:/opt/keycloak/data/import/realm.json:ro
    healthcheck:
      test: [ 'CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8080/health/live' ]
      #    azure ci testing /
      interval: 5s
      timeout: 10s
      retries: 60